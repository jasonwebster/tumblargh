# Autogenerated from a Treetop grammar. Edits may be lost.


module Tumblr
  include Treetop::Runtime

  def root
    @root ||= :root
  end

  def _nt_root
    start_index = index
    if node_cache[:root].has_key?(index)
      cached = node_cache[:root][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      r2 = _nt_block
      if r2
        r1 = r2
      else
        r3 = _nt_tag
        if r3
          r1 = r3
        else
          r4 = _nt_orphan
          if r4
            r1 = r4
          else
            r5 = _nt_literal
            if r5
              r1 = r5
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Tumblargh::Node::Root,input, i0...index, s0)

    node_cache[:root][start_index] = r0

    r0
  end

  module Block0
    def block_start
      elements[0]
    end

    def block_end
      elements[2]
    end
  end

  def _nt_block
    start_index = index
    if node_cache[:block].has_key?(index)
      cached = node_cache[:block][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_block_start
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        r4 = _nt_block
        if r4
          r3 = r4
        else
          r5 = _nt_tag
          if r5
            r3 = r5
          else
            r6 = _nt_orphan
            if r6
              r3 = r6
            else
              r7 = _nt_literal
              if r7
                r3 = r7
              else
                @index = i3
                r3 = nil
              end
            end
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r8 = _nt_block_end
        s0 << r8
      end
    end
    if s0.last
      r0 = instantiate_node(Tumblargh::Node::Block,input, i0...index, s0)
      r0.extend(Block0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:block][start_index] = r0

    r0
  end

  module BlockStart0
    def block_name
      elements[1]
    end

  end

  def _nt_block_start
    start_index = index
    if node_cache[:block_start].has_key?(index)
      cached = node_cache[:block_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{block:', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('{block:')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_block_name
      s0 << r2
      if r2
        r4 = _nt_space
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          r6 = _nt_block_arguments
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            if has_terminal?('}', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('}')
              r7 = nil
            end
            s0 << r7
            if r7
              r9 = _nt_space
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Tumblargh::Node::BlockStart,input, i0...index, s0)
      r0.extend(BlockStart0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:block_start][start_index] = r0

    r0
  end

  module BlockEnd0
    def block_name
      elements[1]
    end

  end

  def _nt_block_end
    start_index = index
    if node_cache[:block_end].has_key?(index)
      cached = node_cache[:block_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{/block:', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('{/block:')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_block_name
      s0 << r2
      if r2
        if has_terminal?('}', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('}')
          r3 = nil
        end
        s0 << r3
        if r3
          r5 = _nt_space
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(Tumblargh::Node::BlockEnd,input, i0...index, s0)
      r0.extend(BlockEnd0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:block_end][start_index] = r0

    r0
  end

  def _nt_block_name
    start_index = index
    if node_cache[:block_name].has_key?(index)
      cached = node_cache[:block_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^\\s}:;]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:block_name][start_index] = r0

    r0
  end

  def _nt_block_arguments
    start_index = index
    if node_cache[:block_arguments].has_key?(index)
      cached = node_cache[:block_arguments][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_block_argument
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:block_arguments][start_index] = r0

    r0
  end

  module BlockArgument0
  end

  module BlockArgument1
  end

  def _nt_block_argument
    start_index = index
    if node_cache[:block_argument].has_key?(index)
      cached = node_cache[:block_argument][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1, s1 = index, []
    s2, i2 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z0-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        s2 << r3
      else
        break
      end
    end
    if s2.empty?
      @index = i2
      r2 = nil
    else
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
    end
    s1 << r2
    if r2
      if has_terminal?('=', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('=')
        r4 = nil
      end
      s1 << r4
      if r4
        if has_terminal?('"', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r5 = nil
        end
        s1 << r5
        if r5
          s6, i6 = [], index
          loop do
            if has_terminal?('\G[a-zA-Z0-9]', true, index)
              r7 = true
              @index += 1
            else
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          if s6.empty?
            @index = i6
            r6 = nil
          else
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          end
          s1 << r6
          if r6
            if has_terminal?('"', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('"')
              r8 = nil
            end
            s1 << r8
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(BlockArgument0)
    else
      @index = i1
      r1 = nil
    end
    s0 << r1
    if r1
      r10 = _nt_space
      if r10
        r9 = r10
      else
        r9 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r9
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BlockArgument1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:block_argument][start_index] = r0

    r0
  end

  module Tag0
    def tag_name
      elements[1]
    end

  end

  def _nt_tag
    start_index = index
    if node_cache[:tag].has_key?(index)
      cached = node_cache[:tag][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_tag_name
      s0 << r2
      if r2
        if has_terminal?('}', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('}')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Tumblargh::Node::Tag,input, i0...index, s0)
      r0.extend(Tag0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tag][start_index] = r0

    r0
  end

  module TagName0
  end

  def _nt_tag_name
    start_index = index
    if node_cache[:tag_name].has_key?(index)
      cached = node_cache[:tag_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?(':', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(':')
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        s5, i5 = [], index
        loop do
          if has_terminal?('\G[^\\n:/{};\\[\\]\\(\\)]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TagName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tag_name][start_index] = r0

    r0
  end

  module Orphan0
  end

  def _nt_orphan
    start_index = index
    if node_cache[:orphan].has_key?(index)
      cached = node_cache[:orphan][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('/', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('/')
        r3 = nil
      end
      if r3
        r2 = nil
      else
        @index = i2
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Tumblargh::Node::Literal,input, i0...index, s0)
      r0.extend(Orphan0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:orphan][start_index] = r0

    r0
  end

  def _nt_literal
    start_index = index
    if node_cache[:literal].has_key?(index)
      cached = node_cache[:literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^{]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Tumblargh::Node::Literal,input, i0...index, s0)
    end

    node_cache[:literal][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

end

class TumblrParser < Treetop::Runtime::CompiledParser
  include Tumblr
end

